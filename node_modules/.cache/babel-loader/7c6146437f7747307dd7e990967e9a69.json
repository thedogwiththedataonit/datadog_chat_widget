{"ast":null,"code":"var _jsxFileName = \"/Users/thomas.park/Documents/datadog-widget-app/react-app/src/widget/Chat.js\",\n  _s = $RefreshSig$();\nimport './Chat.css';\nimport { useState, useEffect, useRef } from 'react';\nimport DatadogIcon from \"./img/datadog-logo.svg\";\nimport UserIcon from \"./img/datadog-products.svg\";\nimport { site, port } from \"../env.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [messageList, setMessageList] = useState([]);\n  const [message, setMessage] = useState('');\n  const [response, setResponse] = useState('');\n  const [relatedQuestions, setRelatedQuestions] = useState([]);\n  const [responseLoading, setResponseLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView();\n  }, [messageList]);\n  async function openAISearch(question, prompt) {\n    const localUrl = `http://${site}:${port}/api/v1/openAISearch`;\n    await fetch(localUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        question: question,\n        prompt: prompt\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      //wait 5 seconds\n      setResponseLoading(false);\n      setMessageList(messageList => [...messageList, {\n        \"question\": data.response,\n        \"status\": false\n      }]);\n\n      //messageList.push({\"question\":data.response, \"status\":false})//true for user, false for bits\n      setResponse(data.response);\n      const relatedQuestions = parseRelatedQuestions(data.related_questions);\n      setRelatedQuestions(relatedQuestions);\n      console.log(messageList);\n    });\n  }\n  const parseRelatedQuestions = string => {\n    //split by :\n    const split = string.split(\" -\");\n    //turn into array \n    let array = split.map(item => {\n      return item.trim();\n    });\n    array = array.filter(item => {\n      return item !== \"\" && item !== \" \";\n    });\n    return array;\n  };\n  const handleMessageChange = event => {\n    setMessage(event.target.value);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (message === \"\" || message === \" \") {\n      return;\n    }\n    setMessageList(messageList => [...messageList, {\n      \"question\": message,\n      \"status\": true\n    }]);\n    //messageList.push({\"question\":message, \"status\":true}) //true for user, false for bits\n    console.log(messageList);\n    event.target.reset();\n    setMessage(\"\");\n    setRelatedQuestions([]);\n    setResponse(false);\n    setResponseLoading(true);\n    handleResponse(message);\n  };\n  const handleSuggestions = value => {\n    setMessageList(messageList => [...messageList, {\n      \"question\": value,\n      \"status\": true\n    }]);\n    //messageList.push({\"question\":value, \"status\":true}) //true for user, false for bits\n    setMessage(\"\");\n    setRelatedQuestions([]);\n    setResponseLoading(true);\n    setResponse(false);\n    handleResponse(value);\n  };\n  const handleResponse = message => {\n    const response = openAISearch(message, \"\"); //prompt is null\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questionbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-row-false\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: DatadogIcon,\n            alt: \"svg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-text-box\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"What are you curious about?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }, this), messageList.map((text, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-row-\" + text.status,\n          children: [!text.status && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: DatadogIcon,\n              alt: \"svg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-text-box\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: text.question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 41\n          }, this), text.status && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: UserIcon,\n              alt: \"svg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 45\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 37\n        }, this);\n      }), responseLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-row-false\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: DatadogIcon,\n            alt: \"svg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-text-box\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"loader-dots\",\n            children: \"Fetching\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"textbox\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"\",\n        onChange: handleMessageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"suggested-questions\",\n      children: relatedQuestions.map((question, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggested-question\",\n          onClick: () => handleSuggestions(question),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 49\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 45\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 13\n  }, this);\n}\n_s(Chat, \"E5VlYj+sGMf7UM1LTWu+OBrD9s8=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useState","useEffect","useRef","site","port","Chat","messageList","setMessageList","message","setMessage","response","setResponse","relatedQuestions","setRelatedQuestions","responseLoading","setResponseLoading","messagesEndRef","current","scrollIntoView","openAISearch","question","prompt","localUrl","fetch","method","headers","body","JSON","stringify","then","res","json","data","console","log","parseRelatedQuestions","related_questions","string","split","array","map","item","trim","filter","handleMessageChange","event","target","value","handleSubmit","preventDefault","reset","handleResponse","handleSuggestions","DatadogIcon","text","i","status","UserIcon"],"sources":["/Users/thomas.park/Documents/datadog-widget-app/react-app/src/widget/Chat.js"],"sourcesContent":["import './Chat.css';\nimport { useState, useEffect, useRef } from 'react';\nimport DatadogIcon from \"./img/datadog-logo.svg\"\nimport UserIcon from \"./img/datadog-products.svg\"\nimport { site, port } from \"../env.js\"\n\n\nfunction Chat() {\n    const [messageList, setMessageList] = useState([])\n    const [message, setMessage] = useState('');\n    const [response, setResponse] = useState('')\n    const [relatedQuestions, setRelatedQuestions] = useState([])\n    const [responseLoading, setResponseLoading] = useState(false)\n    \n    const messagesEndRef = useRef(null)\n\n    useEffect(() => {\n        messagesEndRef.current?.scrollIntoView();\n\n    }, [messageList])\n\n    async function openAISearch(question, prompt){\n        const localUrl = `http://${site}:${port}/api/v1/openAISearch`;\n        await fetch(localUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({question:question, prompt:prompt}),\n            })\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(data)\n                //wait 5 seconds\n                setResponseLoading(false)\n                setMessageList(messageList => [...messageList, {\"question\":data.response, \"status\":false}])\n                \n                //messageList.push({\"question\":data.response, \"status\":false})//true for user, false for bits\n                setResponse(data.response)\n                const relatedQuestions = parseRelatedQuestions(data.related_questions)\n                setRelatedQuestions(relatedQuestions)\n                console.log(messageList)\n\n            })\n\n    }\n\n    const parseRelatedQuestions = (string) => {\n        //split by :\n        const split = string.split(\" -\")\n        //turn into array \n        let array = split.map((item) => {\n            return item.trim()\n        })\n        array = array.filter((item) => {\n            return item !== \"\" && item !== \" \"\n        })\n        return array\n    }\n    \n    const handleMessageChange = event => {\n        setMessage(event.target.value);\n      };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        if ((message === \"\") || (message === \" \")) {\n            return\n        }\n        setMessageList(messageList => [...messageList, {\"question\":message, \"status\":true}])\n        //messageList.push({\"question\":message, \"status\":true}) //true for user, false for bits\n        console.log(messageList)\n        event.target.reset();\n        setMessage(\"\")\n        setRelatedQuestions([])\n        setResponse(false)\n        setResponseLoading(true)\n        handleResponse(message)\n\n    }\n    const handleSuggestions = (value) => {\n        setMessageList(messageList => [...messageList, {\"question\":value, \"status\":true}])\n        //messageList.push({\"question\":value, \"status\":true}) //true for user, false for bits\n        setMessage(\"\")\n        setRelatedQuestions([])\n        setResponseLoading(true)\n        setResponse(false)\n        handleResponse(value)\n    }\n\n    const handleResponse = (message) => {\n        const response = openAISearch(message, \"\") //prompt is null\n    }\n    \n\n    return (<div className=\"questionbox\">\n                    <div className=\"chatbox\">\n                        <div className=\"chat-row-false\">\n                            <span>\n                                <img src={DatadogIcon} alt=\"svg\"></img>\n                            </span>\n                            <div className=\"chat-text-box\">\n                                <p>What are you curious about?</p>\n                            </div>\n                        </div>\n                        {\n                            messageList.map((text,i) => {\n                                return (\n                                    <div className={\"chat-row-\" + text.status} key={i}>\n                                        {!text.status && (\n                                            <span>\n                                                <img src={DatadogIcon} alt=\"svg\"></img>\n                                            </span>\n                                        )}\n                                        <div className=\"chat-text-box\">\n                                            <p>{text.question}</p>\n                                        </div>\n                                        {text.status && (\n                                            <span>\n                                                <img src={UserIcon} alt=\"svg\"></img>\n                                            </span>\n                                        )}\n                                    </div>\n                                    \n                                )\n                            })\n                        }\n                        {\n                            responseLoading && (\n                                <div className=\"chat-row-false\">\n                                    <span>\n                                        <img src={DatadogIcon} alt=\"svg\"></img>\n                                    </span>\n                                    <div className=\"chat-text-box\">\n                                        <p className=\"loader-dots\">Fetching</p>\n                                    </div>\n                                </div>\n                            )\n                        }\n                        <div ref={messagesEndRef}/>\n                    </div>\n                    <form className=\"textbox\" onSubmit={handleSubmit}>\n                        <textarea \n                            placeholder={\"\"}\n                            onChange={handleMessageChange}\n                        ></textarea>\n                        <button>Send</button>\n                    </form>\n                    {\n                        response && (\n                            <div className=\"suggested-questions\">\n                                {\n                                    relatedQuestions.map((question, i) => {\n                                        return (\n                                            <div className=\"suggested-question\" onClick={() => handleSuggestions(question)} key={i}>\n                                                <p>{question}</p>\n                                            </div>\n                                        )\n                                    }\n                                    )\n                                }\n                            </div>\n                        )\n                    }\n                </div>)\n}\n\nexport default Chat;"],"mappings":"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"},"metadata":{},"sourceType":"module"}